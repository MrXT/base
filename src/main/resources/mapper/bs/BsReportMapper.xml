<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.project.module.bs.dao.BsReportMapper">
    <resultMap id="BaseResultMap" type="com.project.entity.BsReport">
        <!--
          WARNING - @mbggenerated
        -->
        <id column="report_id" property="reportId" jdbcType="VARCHAR"/>
        <result column="report_name" property="reportName" jdbcType="VARCHAR"/>
        <result column="user_id" property="userId" jdbcType="VARCHAR"/>
        <result column="report_user_id" property="reportUserId" jdbcType="VARCHAR"/>
        <result column="type" property="type" jdbcType="VARCHAR"/>
        <result column="reason" property="reason" jdbcType="VARCHAR"/>
        <result column="result" property="result" jdbcType="VARCHAR"/>
        <result column="pics" property="pics" jdbcType="VARCHAR"/>
        <result column="status" property="status" jdbcType="BIT"/>
        <result column="ctime" property="ctime" jdbcType="TIMESTAMP"/>
        <result column="utime" property="utime" jdbcType="TIMESTAMP"/>
        <result column="uid" property="uid" jdbcType="VARCHAR"/>
        <result column="valid" property="valid" jdbcType="BIT"/>
    </resultMap>
    <sql id="baseWhere">
        <trim prefix="where" prefixOverrides="and|or">
            <if test="ids != null and ids.size > 0">
                and br.report_id in
                <foreach collection="ids" item="item" open="(" close=")" separator=",">
                    #{item}
                </foreach>
            </if>
            <if test="reportId != null and reportId != ''">
                and br.report_id = #{reportId}
            </if>
            <if test="reportName != null and reportName != ''">
                and br.report_name like concat('%',#{reportName},'%')
            </if>
            <if test="userId != null and userId != ''">
                and br.user_id = #{userId}
            </if>
            <if test="reportUserId != null and reportUserId != ''">
                and br.report_user_id = #{reportUserId}
            </if>
            <if test="type != null and type != ''">
                and find_in_set(#{type},br.type)
            </if>
            <if test="reason != null and reason != ''">
                and br.reason = #{reason}
            </if>
            <if test="result != null and result != ''">
                and br.result = #{result}
            </if>
            <if test="status != null">
                and br.status = #{status}
            </if>
            <if test="ctime != null">
                and br.ctime = #{ctime}
            </if>
            <if test="utime != null">
                and br.utime = #{utime}
            </if>
            <if test="uid != null and uid != ''">
                and br.uid = #{uid}
            </if>
            <if test="valid != null">
                and br.valid = #{valid}
            </if>
            <if test="startDate != null">
                and br.ctime &gt; #{startDate}
            </if>
            <if test="endDate != null">
                and br.ctime &lt; #{endDate}
            </if>
            <if test="name != null and name != ''">
                and su.name like concat('%',#{name},'%')
            </if>
            <if test="reportUserName != null and reportUserName != ''">
                and su1.name like concat('%',#{reportUserName},'%')
            </if>
        </trim>
    </sql>
    <select id="queryByCondition" resultType="com.project.module.bs.controller.vo.BsReportVO">
        select distinct
        br.report_id as reportId,
        br.report_name as reportName,
        br.user_id as userId,
        br.report_user_id as reportUserId,
        br.type as type,
        br.pics as pics,
        br.reason as reason,
        br.result as result,
        br.status as status,
        br.ctime as ctime,
        br.utime as utime,
        br.uid as uid,
        br.valid as valid,
        su.name name,
        su1.name as reportUserName,
        su2.name as uName
        from bs_report br
        inner join sys_user su on su.user_id = br.user_id
        inner join sys_user su1 on su1.user_id = br.report_user_id
        left join sys_user su2 on su2.user_id = br.uid
        <include refid="baseWhere"></include>

    </select>
</mapper>