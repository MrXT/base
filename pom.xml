<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.project</groupId>
    <artifactId>base</artifactId>
    <version>1.0</version>
    <name>base</name>
    <description>后台服务器基础项目模板</description>
    <repositories>
        <repository>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
            <id>public</id>
            <name>Public Repositories</name>
            <url>http://maven.aliyun.com/nexus/content/groups/public/</url>
        </repository>
    </repositories>

    <pluginRepositories>
        <pluginRepository>
            <id>public</id>
            <name>Public Repositories</name>
            <url>http://maven.aliyun.com/nexus/content/groups/public/</url>
        </pluginRepository>
    </pluginRepositories>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.5.7.RELEASE</version>
    </parent>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <java.version>1.8</java.version>
        <common.version>1.0</common.version>
        <common.genetator.version>1.0</common.genetator.version>
        <drools.version>7.60.0.Final</drools.version>
    </properties>
    <dependencies>
        <!--公共包-->
        <dependency>
            <groupId>com.project</groupId>
            <artifactId>common</artifactId>
            <version>1.0</version>
        </dependency>


        <!--springboot web-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>


        <!-- 支付宝sdk -->

        <dependency>
            <groupId>com.alipay.sdk</groupId>
            <artifactId>alipay-sdk-java</artifactId>
            <version>3.1.0</version>
        </dependency>

        <!-- 微信sdk -->
        <!--微信支付 -->
        <dependency>
            <groupId>com.github.binarywang</groupId>
            <artifactId>weixin-java-pay</artifactId>
            <version>3.1.0</version>
        </dependency>

        <!--微信公众号 -->
        <dependency>
            <groupId>com.github.binarywang</groupId>
            <artifactId>weixin-java-mp</artifactId>
            <version>3.1.0</version>
        </dependency>

        <!--lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.6</version>
            <scope>compile</scope>
        </dependency>

        <!--Drools-->
        <dependency>
            <groupId>org.kie</groupId>
            <artifactId>kie-api</artifactId>
            <version>${drools.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.drools</groupId>
            <artifactId>drools-core</artifactId>
            <version>${drools.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.drools</groupId>
            <artifactId>drools-compiler</artifactId>
            <version>${drools.version}</version>
        </dependency>
        <dependency>
            <groupId>org.drools</groupId>
            <artifactId>drools-decisiontables</artifactId>
            <version>${drools.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.drools</groupId>
            <artifactId>drools-templates</artifactId>
            <version>${drools.version}</version>
            <scope>test</scope>
        </dependency>
        <!--test -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>RELEASE</version>
            <scope>test</scope>
        </dependency>

    </dependencies>
    <build>
        <testResources>
            <testResource>
                <directory>src/test/resources</directory>
            </testResource>
            <testResource>
                <directory>src/test/java</directory>
            </testResource>
        </testResources>
        <resources>
            <resource>
                <directory>src/main/java</directory>
                <excludes>
                    <exclude>**/*.java</exclude>
                </excludes>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.*</include>
                </includes>
            </resource>
        </resources>
        <plugins>
            <!-- compiler -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <!--源平台 -->
                    <source>${java.version}</source>
                    <!--目标平台 -->
                    <target>${java.version}</target>
                    <encoding>${project.build.sourceEncoding}</encoding>
                </configuration>
            </plugin>
            <!--copy dependence jar -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <!-- ${project.build.directory}就是我们通常看到的target目录 -->
                            <outputDirectory>${project.build.directory}/${project.name}/libs</outputDirectory>
                            <overWriteIfNewer>true</overWriteIfNewer>
                            <overWriteSnapshots>true</overWriteSnapshots>
                            <type>jar</type>
                            <includeTypes>jar</includeTypes>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!--打包插件 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>
                        <manifest>
                            <addClasspath>true
                            </addClasspath>   <!-- 告知 maven-jar-plugin 添加一个 Class-Path 元素到 MANIFEST.MF 文件 -->
                            <classpathPrefix>libs/
                            </classpathPrefix> <!-- classpathPrefix 指出，相对存档文件，所有的依赖项应该位于 “lib” 文件夹 -->
                            <mainClass>com.project.ProjectApplication
                            </mainClass>  <!-- 当用户使用 lib 命令执行 JAR 文件时，使用该元素定义将要执行的类名 -->
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <!--ant插件 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>1.8</version><!--$NO-MVN-MAN-VER$ -->
                <executions>
                    <execution>
                        <phase>install</phase>
                        <configuration>
                            <target>
                                <!--复制jar -->
                                <copy file="${basedir}/target/${project.name}-${project.version}.jar"
                                      tofile="${basedir}/target/${project.name}/${project.name}-${project.version}.jar"
                                      overwrite="true"></copy>

                                <!--复制application -->
                                <copy file="${basedir}/src/main/resources/application.properties"
                                      tofile="${basedir}/target/${project.name}/application.properties"
                                      overwrite="true"></copy>
                                <!--复制生成文件 -->
                                <copy todir="${basedir}/target/${project.name}" overwrite="true">
                                    <fileset dir="${project.build.directory}/classes/config"
                                             includes="generator.bat">
                                    </fileset>
                                </copy>
                                <!--复制配置文件 -->
                                <copy todir="${basedir}/target/${project.name}/config"
                                      overwrite="true">
                                    <fileset dir="${basedir}/config">
                                    </fileset>
                                </copy>
                                <!--执行生成启动脚本 -->
                                <exec executable="cmd" spawn="true">
                                    <arg value="/c"></arg>
                                    <arg value="${basedir}/target/${project.name}/generator.bat"></arg>
                                    <arg value="${project.name}-${project.version}.jar"></arg>
                                    <arg value="${project.name}"></arg>
                                </exec>
                                <!--删除生成文件 -->
                                <delete file="${basedir}/target/${project.name}/generator.bat"></delete>
                                <!-- <delete file="${basedir}/target/${project.name}-${project.version}.jar"></delete> -->
                            </target>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!--JS压缩插件-->
            <plugin>
                <groupId>net.alchim31.maven</groupId>
                <artifactId>yuicompressor-maven-plugin</artifactId>
                <version>1.5.1</version>
                <executions>
                    <execution>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>compress</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <encoding>UTF-8</encoding>
                    <jswarn>false</jswarn>
                    <nosuffix>true</nosuffix>
                    <linebreakpos>-1</linebreakpos>
                    <sourceDirectory>src/main/resources/assets</sourceDirectory>
                    <outputDirectory>target/classes/assets</outputDirectory>
                    <force>true</force>
                    <includes>
                        <include>js/**.js</include>
                    </includes>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
